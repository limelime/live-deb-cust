https://docs.docker.com/get-started/#images-and-containers
Fundamentally, a container is nothing but a running process, with some added encapsulation features applied to it in order to keep it isolated from the host and from other containers. One of the most important aspects of container isolation is that each container interacts with its own private filesystem; this filesystem is provided by a Docker image. An image includes everything needed to run an application - the code or binary, runtimes, dependencies, and any other filesystem objects required.

Image: filesystem:
    Container: Big.exe

# Change Root dir
    echo '{ "graph": "/media/sql/docker" }' > /etc/docker/daemon.json
    systemctl restart docker

# Default docker data directory.
    /var/lib/docker/
    systemctl restart docker
    # service docker stop
    # service docker start

# Ignore file.
    .dockerignore
    
# https://www.youtube.com/watch?v=iqqDU2crIEQ
    docker build --tag hello-world -f
        # Must have Dockerfile
    docker build <a container>

    docker images
    docker ps
    docker ps -a

    docker start <image>
    docker stop <image>

    docker rm <image>

    docker run --help
    docker run -p 8080:80 --name hello -d hello-world
    docker run -p <local port>:<container port>
    docker stop hello

    docker logs hello -f


    ## Docker hub
        docker tag hello-world xngo/hello-world
        docker push xngo/hello-world

        docker rmi xngo/hello-world

        docker pull xngo/hello-world

   ## Docker compose
        dcoker-compose up -d
            # Must have docker-compose.yml
            
# Where docker files are stored
    docker info | grep 'Docker Root Dir'


# Delete all containers.
    docker rm $(docker ps -a | tail +2 | cut -d' ' -f1 | xargs)

# Delete all images with <none> name.
    docker rmi $(docker images | grep '<none>' | awk '{print $3}')
    
# Image
    # List what is inside the image.
        docker run -it --rm <image> ls
        
    # Access all commands of the image.
	    docker run -it --rm py-hello cp --help
	    docker run -it --rm py-hello ls --help
	    docker run -it --rm py-hello mv --help
	    docker run -it --rm py-hello find --help
	    
	    docker run -it --rm py-hello echo 'hello'
        docker run -it --rm py-hello ls /

# Passing input file to image. Use docker volumes. https://stackoverflow.com/a/41092636
    docker run -v /local/path/to/file1.txt:/container/path/to/file1.txt -t <image> python myscrip.py file1.txt
    
# Passing args to Dockerfile: https://stackoverflow.com/a/51708059
    You'd have to docker "build --build-arg build-date=$(date)" or something like that. 
    Having done that, you can refer to the argument using something similar to shell variable syntax at build time.

# Access docker.
    docker exec -it <mycontainer> bash
